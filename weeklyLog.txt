--NOAHS WEEKLY LOG!--

9/27: organized files, read paper discussing ENF signals
10/4: with Jon and Howie, wrote proposal. Brainstormed general strategy for how to extract ENF signal from audio
10/11: worked with Jon and Howie on matlab code to generalize reading in data provided by IEEE. Saved all the data in a convenient format to use for testing later on. Set up github for the project and showed Jon and Howie how to use it. Made a gameplan for how to split up the work going forward
10/18: Began to try to extract the ENF signal from the audio files provided as specified in a paper found. The paper gives a clear method for how to extract it and we'll see if it gives results as expected.
10/25 Continued to try to extract ENF signal. Finished implementing STFT algorithm and began working on QIFFT algorithm. Went over Jon and Howie's progress on the classifier
11/1 Went over the QIFFT function with Jon and Howie. Extensively debugged it to make sure the results made sense. 
11/8 Finished the overall ENF extraction process. Began the switch from Matlab to Python
11/15 Prepared Senior Project poster with Jon and Howie. rewrote the ENF extractor code so to generate useful figures to put in the poster
11/22 Finished rewriting main parts of feature extraction in Python. Found that the results weren't as good as in Matlab. Also tested initial feature extraction on recovered ENF signal (as opposed to directly on the power signal) and it gave much worse results.
11/29 Cleaned up a lot of code. Finished getting the code to output in a correct format so that we could test on the IEEE test set they released. We got 58% the first time. This is probably because we didn't realize that IEEE wasn't going to label whether or not a sample was audio or power. So designed with Jon an updated system to handle both audio and power. First we put sample through binary audio/power classifier. Then pass sample to one-class classifier to determine if it's Non-of-the-above class. If it's not, pass it into 9-class classifier to determine which grid it came from. There are two 9-class classifiers, depending on if we're classifying audio or power. 
12/6 Began to work on one-class classifier with gone. Not getting such good results at first. Using binary audio/power classifier we got 82% on IEEE test set.
12/13 Wrote final presentation with Jon and Howie. Reran code to get useful plots to show in the slides. Helped Jon get further in the None-of-the-above classifier because we were having trouble combining the results of all the different classifiers correctly (From the Audio/Power NoneOfTheAbove, GridClassifier). Our final implementation is in naOverallClassifier.py. Unfortunately, when we tested it on the IEEE site, we only got 82%, which is exactly the same as before. However, it must be that our classifier is getting come things right, because we got 82% before we were even classifying NoneOfTheAbove. We need to do further inspection on the outputs to see what we need to focus on.
